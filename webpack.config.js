const webpack = require('webpack')
const MiniCssExtractPlugin = require('mini-css-extract-plugin');
const CaseSensitivePathsPlugin = require('case-sensitive-paths-webpack-plugin');
const OptimilizeCssnanoPlugin = require('@intervolga/optimize-cssnano-plugin')
const { WebpackManifestPlugin } = require('webpack-manifest-plugin');
const PostCompileWebpackPlugin = require('post-compile-webpack-plugin')
const { removeEmpty } = require('webpack-config-utils');
const path = require("path");
const { fromRoot, ifProd, ifDev, hasFile } = require("./scripts/utils");
const { isEqual } = require('lodash');
const fse = require('fs-extra')

const styleLoader = {
  loader: 'style-loader'
}
const getCssLoader = (options) => ({
  loader: 'css-loader',
  options: {
    modules: {
      localsConvention: 'camelCase',
    },
    importLoaders: 1,
    sourceMap: true,
    ...options
  }
})
const postcssLoader = {
  loader: 'postcss-loader',
  options: {
    sourceMap: true,
    postcssOptions: {
      plugins: () => [
        require('postcss-flexbugs-fixes'),
        require('autoprefixer')({
          overrideBrowserslist: [
            '>1%',
            'last 4 versions',
            'Firefox ESR',
            'not ie < 9',
          ],
          flexbox: 'no-2009'
        })
      ]
    }
  }
}

const clientBuildPath = 'dist/client/js'
module.exports = removeEmpty({
  mode: ifProd('production', 'development'),
  context: path.resolve(__dirname, 'client'),
  entry: "./index.js",
  output: {
    path: path.join(__dirname, clientBuildPath),
    filename: ifProd("bundle.[fullhash].js", "bundle.js")
  },
  module: {
    rules: [
      {
        oneOf: [
          {
            test: /\.(js|tsx|ts)$/,
            include: fromRoot('client'),
            exclude: /node_modules/,
            loader: "babel-loader",
            options: {
              cacheDirectory: true,
              ...(require(fromRoot('.babelrc.js')))
            }
          },
          {
            test: [/\.bmp$/, /\.gif$/, /\.jep?g$/, /\.png$/],
            exclude: /node_modules/,
            loader: "url-loader",
            options: {
              limit: 100000,
              name: 'assets/[name].[ext]'
            }
          },
          {
            test: /\.module\.css$/,
            use: [
              ifProd(MiniCssExtractPlugin.loader, styleLoader),
              getCssLoader({ modules: true }),
              postcssLoader,
            ]
          },
          {
            test: /\.css$/,
            exclude: /\.module\.css$/,
            use: [
              ifProd(MiniCssExtractPlugin.loader, styleLoader),
              getCssLoader({ modules: false }),
              postcssLoader,
            ]
          },
          {
            test: /\.scss$/,
            use: [
              ifProd(MiniCssExtractPlugin.loader, styleLoader),
              getCssLoader({ modules: false }),
              {
                loader: 'sass-loader',
                options: {
                  sourceMap: true,
                }
              }
            ]
          },
          {
            exclude: [
              /\.(js|tsx|ts)$/,
              /\.html$/,
              /\.json$/,
              /\.ejs$/,
              /\.mjs$/,
              /node_modules/,
            ],
            loader: 'file-loader',
            options: {
              name: 'assets/[name].[ext]'
            }
          }
        ].filter(Boolean)
      },
    ]
  },
  plugins: [
    new webpack.DefinePlugin({
      'process.env.CLIENT_PORT': JSON.stringify(process.env.CLIENT_PORT),
      'process.env.PORT': JSON.stringify(process.env.PORT),
    }),
    new webpack.IgnorePlugin({ resourceRegExp: /^\.locale$/, contextRegExp: /moment$/ }),
    // // 避免由于模块路径大小写问题引起的错误
    ifDev(new CaseSensitivePathsPlugin()),
    ifProd(new MiniCssExtractPlugin({ filename: '[name].[chunkhash].css' })),
    ifProd(new OptimilizeCssnanoPlugin({
      sourceMap: true,
      cssnanoOptions: {
        preset: ['default']
      }
    })),
    new WebpackManifestPlugin({
      fileName: 'client-asset-manifest.json',
      writeToFileEmit: true,
      seed: {
        info: 'this file is generated by the webpack build. Do not modify directly.',
        assets: {},
      },
      generate(seed, files) {
        return files.reduce((manifest, asset) => {
          const {
            chunk: ignoredChunk,
            ...assetProps
          } = asset
          manifest.assets[asset.name] = {
            ...assetProps,
            path: assetProps.path.replace(/^auto\//, ''),
          }
          return manifest
        }, seed)
      }
    }),
    new PostCompileWebpackPlugin(() => {
      // 编译完成后将 client-asset-manifest.json copy 到 server/client 下
      const clientManifest = `${clientBuildPath}/client-asset-manifest.json`
      const copyToServerManifest = 'server/config/client-asset-manifest.json'
      if (hasFile(clientManifest)) {
        let changed = true
        if (hasFile(copyToServerManifest)) {
          const exitingManifest = require(fromRoot(copyToServerManifest))
          const newManifest = require(fromRoot(clientManifest))
          changed = !isEqual(exitingManifest, newManifest)
        }
        if (changed) {
          fse.ensureDirSync(fromRoot('server/config'))
          fse.copySync(
            fromRoot(clientManifest),
            fromRoot(copyToServerManifest)
          )
        }
      }

    })

  ].filter(Boolean),
  optimization: {
    moduleIds: 'named',
    emitOnErrors: false,
  },
  devtool: ifProd('source-map', 'cheap-module-source-map'),
  devServer: {
    client: {
      logging: 'info',
      overlay: false
    },
    static: {
      directory: path.join(__dirname, clientBuildPath),
    },
    allowedHosts: ['localhost'],
    host: 'localhost',
    hot: true,
    port: process.env.CLIENT_PORT || 7975,
  },
  performance: {
    hints: ifProd('warning', false),
    maxEntrypointSize: 1000000,
    maxAssetSize: 1000000,
  }


})
